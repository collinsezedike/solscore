/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from 'gill';

export const BET_DISCRIMINATOR = new Uint8Array([
  147, 23, 35, 59, 15, 75, 155, 32,
]);

export function getBetDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BET_DISCRIMINATOR);
}

export type Bet = {
  discriminator: ReadonlyUint8Array;
  user: Address;
  market: Address;
  teamIndex: number;
  amount: bigint;
  payoutAmount: Option<bigint>;
  timestamp: bigint;
  bump: number;
};

export type BetArgs = {
  user: Address;
  market: Address;
  teamIndex: number;
  amount: number | bigint;
  payoutAmount: OptionOrNullable<number | bigint>;
  timestamp: number | bigint;
  bump: number;
};

export function getBetEncoder(): Encoder<BetArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['user', getAddressEncoder()],
      ['market', getAddressEncoder()],
      ['teamIndex', getU8Encoder()],
      ['amount', getU64Encoder()],
      ['payoutAmount', getOptionEncoder(getU64Encoder())],
      ['timestamp', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BET_DISCRIMINATOR })
  );
}

export function getBetDecoder(): Decoder<Bet> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['user', getAddressDecoder()],
    ['market', getAddressDecoder()],
    ['teamIndex', getU8Decoder()],
    ['amount', getU64Decoder()],
    ['payoutAmount', getOptionDecoder(getU64Decoder())],
    ['timestamp', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getBetCodec(): Codec<BetArgs, Bet> {
  return combineCodec(getBetEncoder(), getBetDecoder());
}

export function decodeBet<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Bet, TAddress>;
export function decodeBet<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Bet, TAddress>;
export function decodeBet<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Bet, TAddress> | MaybeAccount<Bet, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBetDecoder()
  );
}

export async function fetchBet<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Bet, TAddress>> {
  const maybeAccount = await fetchMaybeBet(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBet<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Bet, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBet(maybeAccount);
}

export async function fetchAllBet(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Bet>[]> {
  const maybeAccounts = await fetchAllMaybeBet(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBet(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Bet>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBet(maybeAccount));
}
