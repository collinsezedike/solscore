/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from 'gill';

export const MARKET_DISCRIMINATOR = new Uint8Array([
  219, 190, 213, 55, 0, 227, 198, 154,
]);

export function getMarketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MARKET_DISCRIMINATOR);
}

export type Market = {
  discriminator: ReadonlyUint8Array;
  admin: Address;
  leagueName: string;
  season: string;
  teams: Array<string>;
  odds: Array<bigint>;
  isResolved: boolean;
  winningTeamIndex: Option<number>;
  totalPool: bigint;
  createdAt: bigint;
  resolvedAt: Option<bigint>;
  bump: number;
};

export type MarketArgs = {
  admin: Address;
  leagueName: string;
  season: string;
  teams: Array<string>;
  odds: Array<number | bigint>;
  isResolved: boolean;
  winningTeamIndex: OptionOrNullable<number>;
  totalPool: number | bigint;
  createdAt: number | bigint;
  resolvedAt: OptionOrNullable<number | bigint>;
  bump: number;
};

export function getMarketEncoder(): Encoder<MarketArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['admin', getAddressEncoder()],
      ['leagueName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['season', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'teams',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['odds', getArrayEncoder(getU64Encoder())],
      ['isResolved', getBooleanEncoder()],
      ['winningTeamIndex', getOptionEncoder(getU8Encoder())],
      ['totalPool', getU64Encoder()],
      ['createdAt', getI64Encoder()],
      ['resolvedAt', getOptionEncoder(getI64Encoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MARKET_DISCRIMINATOR })
  );
}

export function getMarketDecoder(): Decoder<Market> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['admin', getAddressDecoder()],
    ['leagueName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['season', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'teams',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['odds', getArrayDecoder(getU64Decoder())],
    ['isResolved', getBooleanDecoder()],
    ['winningTeamIndex', getOptionDecoder(getU8Decoder())],
    ['totalPool', getU64Decoder()],
    ['createdAt', getI64Decoder()],
    ['resolvedAt', getOptionDecoder(getI64Decoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getMarketCodec(): Codec<MarketArgs, Market> {
  return combineCodec(getMarketEncoder(), getMarketDecoder());
}

export function decodeMarket<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Market, TAddress>;
export function decodeMarket<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Market, TAddress>;
export function decodeMarket<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Market, TAddress> | MaybeAccount<Market, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMarketDecoder()
  );
}

export async function fetchMarket<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Market, TAddress>> {
  const maybeAccount = await fetchMaybeMarket(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMarket<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Market, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMarket(maybeAccount);
}

export async function fetchAllMarket(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Market>[]> {
  const maybeAccounts = await fetchAllMaybeMarket(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMarket(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Market>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMarket(maybeAccount));
}
