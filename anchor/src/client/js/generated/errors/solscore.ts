/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { SOLSCORE_PROGRAM_ADDRESS } from '../programs';

/** EmptyTeamsOrOdds: Market teams and odds vectors must not be empty */
export const SOLSCORE_ERROR__EMPTY_TEAMS_OR_ODDS = 0x1770; // 6000
/** TeamsAndOddsLengthMismatch: Market teams and odds vectors must have the same length */
export const SOLSCORE_ERROR__TEAMS_AND_ODDS_LENGTH_MISMATCH = 0x1771; // 6001
/** MarketAllowedBettorsLimitExceeded: Market cannot accept any more bets */
export const SOLSCORE_ERROR__MARKET_ALLOWED_BETTORS_LIMIT_EXCEEDED = 0x1772; // 6002
/** MarketResolved: Market has already been resolved */
export const SOLSCORE_ERROR__MARKET_RESOLVED = 0x1773; // 6003
/** MarketNotResolved: Market has not been resolved */
export const SOLSCORE_ERROR__MARKET_NOT_RESOLVED = 0x1774; // 6004
/** InvalidBetAmount: Bet amount must be greater than zero and less than the market maximum stake amount */
export const SOLSCORE_ERROR__INVALID_BET_AMOUNT = 0x1775; // 6005
/** BetNotWon: Bet team index does not match market winning team index */
export const SOLSCORE_ERROR__BET_NOT_WON = 0x1776; // 6006
/** InsufficientBalance: Insufficient USDC balance */
export const SOLSCORE_ERROR__INSUFFICIENT_BALANCE = 0x1777; // 6007
/** InvalidTeamIndex: Invalid team index */
export const SOLSCORE_ERROR__INVALID_TEAM_INDEX = 0x1778; // 6008
/** MathOverflow: Mathematical overflow */
export const SOLSCORE_ERROR__MATH_OVERFLOW = 0x1779; // 6009
/** MathUnderflow: Mathematical underflow */
export const SOLSCORE_ERROR__MATH_UNDERFLOW = 0x177a; // 6010

export type SolscoreError =
  | typeof SOLSCORE_ERROR__BET_NOT_WON
  | typeof SOLSCORE_ERROR__EMPTY_TEAMS_OR_ODDS
  | typeof SOLSCORE_ERROR__INSUFFICIENT_BALANCE
  | typeof SOLSCORE_ERROR__INVALID_BET_AMOUNT
  | typeof SOLSCORE_ERROR__INVALID_TEAM_INDEX
  | typeof SOLSCORE_ERROR__MARKET_ALLOWED_BETTORS_LIMIT_EXCEEDED
  | typeof SOLSCORE_ERROR__MARKET_NOT_RESOLVED
  | typeof SOLSCORE_ERROR__MARKET_RESOLVED
  | typeof SOLSCORE_ERROR__MATH_OVERFLOW
  | typeof SOLSCORE_ERROR__MATH_UNDERFLOW
  | typeof SOLSCORE_ERROR__TEAMS_AND_ODDS_LENGTH_MISMATCH;

let solscoreErrorMessages: Record<SolscoreError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  solscoreErrorMessages = {
    [SOLSCORE_ERROR__BET_NOT_WON]: `Bet team index does not match market winning team index`,
    [SOLSCORE_ERROR__EMPTY_TEAMS_OR_ODDS]: `Market teams and odds vectors must not be empty`,
    [SOLSCORE_ERROR__INSUFFICIENT_BALANCE]: `Insufficient USDC balance`,
    [SOLSCORE_ERROR__INVALID_BET_AMOUNT]: `Bet amount must be greater than zero and less than the market maximum stake amount`,
    [SOLSCORE_ERROR__INVALID_TEAM_INDEX]: `Invalid team index`,
    [SOLSCORE_ERROR__MARKET_ALLOWED_BETTORS_LIMIT_EXCEEDED]: `Market cannot accept any more bets`,
    [SOLSCORE_ERROR__MARKET_NOT_RESOLVED]: `Market has not been resolved`,
    [SOLSCORE_ERROR__MARKET_RESOLVED]: `Market has already been resolved`,
    [SOLSCORE_ERROR__MATH_OVERFLOW]: `Mathematical overflow`,
    [SOLSCORE_ERROR__MATH_UNDERFLOW]: `Mathematical underflow`,
    [SOLSCORE_ERROR__TEAMS_AND_ODDS_LENGTH_MISMATCH]: `Market teams and odds vectors must have the same length`,
  };
}

export function getSolscoreErrorMessage(code: SolscoreError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (solscoreErrorMessages as Record<SolscoreError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isSolscoreError<TProgramErrorCode extends SolscoreError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SOLSCORE_PROGRAM_ADDRESS,
    code
  );
}
