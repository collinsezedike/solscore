/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { SOLSCORE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_MARKET_DISCRIMINATOR = new Uint8Array([
  35, 35, 189, 193, 155, 48, 170, 203,
]);

export function getInitializeMarketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_MARKET_DISCRIMINATOR
  );
}

export type InitializeMarketInstruction<
  TProgram extends string = typeof SOLSCORE_PROGRAM_ADDRESS,
  TAccountMarket extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeMarketInstructionData = {
  discriminator: ReadonlyUint8Array;
  leagueName: string;
  season: string;
  teams: Array<string>;
  odds: Array<bigint>;
};

export type InitializeMarketInstructionDataArgs = {
  leagueName: string;
  season: string;
  teams: Array<string>;
  odds: Array<number | bigint>;
};

export function getInitializeMarketInstructionDataEncoder(): Encoder<InitializeMarketInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['leagueName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['season', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'teams',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['odds', getArrayEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_MARKET_DISCRIMINATOR })
  );
}

export function getInitializeMarketInstructionDataDecoder(): Decoder<InitializeMarketInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['leagueName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['season', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'teams',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['odds', getArrayDecoder(getU64Decoder())],
  ]);
}

export function getInitializeMarketInstructionDataCodec(): Codec<
  InitializeMarketInstructionDataArgs,
  InitializeMarketInstructionData
> {
  return combineCodec(
    getInitializeMarketInstructionDataEncoder(),
    getInitializeMarketInstructionDataDecoder()
  );
}

export type InitializeMarketAsyncInput<
  TAccountMarket extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  market?: Address<TAccountMarket>;
  vault?: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  admin: TransactionSigner<TAccountAdmin>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  leagueName: InitializeMarketInstructionDataArgs['leagueName'];
  season: InitializeMarketInstructionDataArgs['season'];
  teams: InitializeMarketInstructionDataArgs['teams'];
  odds: InitializeMarketInstructionDataArgs['odds'];
};

export async function getInitializeMarketInstructionAsync<
  TAccountMarket extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountAdmin extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLSCORE_PROGRAM_ADDRESS,
>(
  input: InitializeMarketAsyncInput<
    TAccountMarket,
    TAccountVault,
    TAccountMint,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeMarketInstruction<
    TProgramAddress,
    TAccountMarket,
    TAccountVault,
    TAccountMint,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLSCORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    market: { value: input.market ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.market.value) {
    accounts.market.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97, 114, 107, 101, 116])),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.leagueName)
        ),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.season)
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeMarketInstructionDataEncoder().encode(
      args as InitializeMarketInstructionDataArgs
    ),
  } as InitializeMarketInstruction<
    TProgramAddress,
    TAccountMarket,
    TAccountVault,
    TAccountMint,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeMarketInput<
  TAccountMarket extends string = string,
  TAccountVault extends string = string,
  TAccountMint extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  market: Address<TAccountMarket>;
  vault: Address<TAccountVault>;
  mint: Address<TAccountMint>;
  admin: TransactionSigner<TAccountAdmin>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  leagueName: InitializeMarketInstructionDataArgs['leagueName'];
  season: InitializeMarketInstructionDataArgs['season'];
  teams: InitializeMarketInstructionDataArgs['teams'];
  odds: InitializeMarketInstructionDataArgs['odds'];
};

export function getInitializeMarketInstruction<
  TAccountMarket extends string,
  TAccountVault extends string,
  TAccountMint extends string,
  TAccountAdmin extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLSCORE_PROGRAM_ADDRESS,
>(
  input: InitializeMarketInput<
    TAccountMarket,
    TAccountVault,
    TAccountMint,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeMarketInstruction<
  TProgramAddress,
  TAccountMarket,
  TAccountVault,
  TAccountMint,
  TAccountAdmin,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLSCORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    market: { value: input.market ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeMarketInstructionDataEncoder().encode(
      args as InitializeMarketInstructionDataArgs
    ),
  } as InitializeMarketInstruction<
    TProgramAddress,
    TAccountMarket,
    TAccountVault,
    TAccountMint,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeMarketInstruction<
  TProgram extends string = typeof SOLSCORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    market: TAccountMetas[0];
    vault: TAccountMetas[1];
    mint: TAccountMetas[2];
    admin: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
    associatedTokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: InitializeMarketInstructionData;
};

export function parseInitializeMarketInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeMarketInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      market: getNextAccount(),
      vault: getNextAccount(),
      mint: getNextAccount(),
      admin: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeMarketInstructionDataDecoder().decode(instruction.data),
  };
}
