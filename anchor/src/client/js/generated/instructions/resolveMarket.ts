/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { SOLSCORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RESOLVE_MARKET_DISCRIMINATOR = new Uint8Array([
  155, 23, 80, 173, 46, 74, 23, 239,
]);

export function getResolveMarketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RESOLVE_MARKET_DISCRIMINATOR
  );
}

export type ResolveMarketInstruction<
  TProgram extends string = typeof SOLSCORE_PROGRAM_ADDRESS,
  TAccountMarket extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ResolveMarketInstructionData = {
  discriminator: ReadonlyUint8Array;
  winningTeamIndex: number;
};

export type ResolveMarketInstructionDataArgs = { winningTeamIndex: number };

export function getResolveMarketInstructionDataEncoder(): FixedSizeEncoder<ResolveMarketInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['winningTeamIndex', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: RESOLVE_MARKET_DISCRIMINATOR })
  );
}

export function getResolveMarketInstructionDataDecoder(): FixedSizeDecoder<ResolveMarketInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['winningTeamIndex', getU8Decoder()],
  ]);
}

export function getResolveMarketInstructionDataCodec(): FixedSizeCodec<
  ResolveMarketInstructionDataArgs,
  ResolveMarketInstructionData
> {
  return combineCodec(
    getResolveMarketInstructionDataEncoder(),
    getResolveMarketInstructionDataDecoder()
  );
}

export type ResolveMarketInput<
  TAccountMarket extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  market: Address<TAccountMarket>;
  admin: TransactionSigner<TAccountAdmin>;
  systemProgram?: Address<TAccountSystemProgram>;
  winningTeamIndex: ResolveMarketInstructionDataArgs['winningTeamIndex'];
};

export function getResolveMarketInstruction<
  TAccountMarket extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLSCORE_PROGRAM_ADDRESS,
>(
  input: ResolveMarketInput<
    TAccountMarket,
    TAccountAdmin,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ResolveMarketInstruction<
  TProgramAddress,
  TAccountMarket,
  TAccountAdmin,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLSCORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    market: { value: input.market ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getResolveMarketInstructionDataEncoder().encode(
      args as ResolveMarketInstructionDataArgs
    ),
  } as ResolveMarketInstruction<
    TProgramAddress,
    TAccountMarket,
    TAccountAdmin,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedResolveMarketInstruction<
  TProgram extends string = typeof SOLSCORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    market: TAccountMetas[0];
    admin: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: ResolveMarketInstructionData;
};

export function parseResolveMarketInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedResolveMarketInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      market: getNextAccount(),
      admin: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getResolveMarketInstructionDataDecoder().decode(instruction.data),
  };
}
