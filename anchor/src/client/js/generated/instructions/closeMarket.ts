/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { SOLSCORE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLOSE_MARKET_DISCRIMINATOR = new Uint8Array([
  88, 154, 248, 186, 48, 14, 123, 244,
]);

export function getCloseMarketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_MARKET_DISCRIMINATOR
  );
}

export type CloseMarketInstruction<
  TProgram extends string = typeof SOLSCORE_PROGRAM_ADDRESS,
  TAccountMarket extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountAdminTokenAccount extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountAdminTokenAccount extends string
        ? WritableAccount<TAccountAdminTokenAccount>
        : TAccountAdminTokenAccount,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseMarketInstructionData = { discriminator: ReadonlyUint8Array };

export type CloseMarketInstructionDataArgs = {};

export function getCloseMarketInstructionDataEncoder(): FixedSizeEncoder<CloseMarketInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_MARKET_DISCRIMINATOR })
  );
}

export function getCloseMarketInstructionDataDecoder(): FixedSizeDecoder<CloseMarketInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseMarketInstructionDataCodec(): FixedSizeCodec<
  CloseMarketInstructionDataArgs,
  CloseMarketInstructionData
> {
  return combineCodec(
    getCloseMarketInstructionDataEncoder(),
    getCloseMarketInstructionDataDecoder()
  );
}

export type CloseMarketAsyncInput<
  TAccountMarket extends string = string,
  TAccountMint extends string = string,
  TAccountVault extends string = string,
  TAccountAdminTokenAccount extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  market: Address<TAccountMarket>;
  mint: Address<TAccountMint>;
  vault?: Address<TAccountVault>;
  adminTokenAccount?: Address<TAccountAdminTokenAccount>;
  admin: TransactionSigner<TAccountAdmin>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getCloseMarketInstructionAsync<
  TAccountMarket extends string,
  TAccountMint extends string,
  TAccountVault extends string,
  TAccountAdminTokenAccount extends string,
  TAccountAdmin extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLSCORE_PROGRAM_ADDRESS,
>(
  input: CloseMarketAsyncInput<
    TAccountMarket,
    TAccountMint,
    TAccountVault,
    TAccountAdminTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CloseMarketInstruction<
    TProgramAddress,
    TAccountMarket,
    TAccountMint,
    TAccountVault,
    TAccountAdminTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLSCORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    market: { value: input.market ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    adminTokenAccount: {
      value: input.adminTokenAccount ?? null,
      isWritable: true,
    },
    admin: { value: input.admin ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.adminTokenAccount.value) {
    accounts.adminTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.admin.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.adminTokenAccount),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCloseMarketInstructionDataEncoder().encode({}),
  } as CloseMarketInstruction<
    TProgramAddress,
    TAccountMarket,
    TAccountMint,
    TAccountVault,
    TAccountAdminTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CloseMarketInput<
  TAccountMarket extends string = string,
  TAccountMint extends string = string,
  TAccountVault extends string = string,
  TAccountAdminTokenAccount extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  market: Address<TAccountMarket>;
  mint: Address<TAccountMint>;
  vault: Address<TAccountVault>;
  adminTokenAccount: Address<TAccountAdminTokenAccount>;
  admin: TransactionSigner<TAccountAdmin>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCloseMarketInstruction<
  TAccountMarket extends string,
  TAccountMint extends string,
  TAccountVault extends string,
  TAccountAdminTokenAccount extends string,
  TAccountAdmin extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SOLSCORE_PROGRAM_ADDRESS,
>(
  input: CloseMarketInput<
    TAccountMarket,
    TAccountMint,
    TAccountVault,
    TAccountAdminTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseMarketInstruction<
  TProgramAddress,
  TAccountMarket,
  TAccountMint,
  TAccountVault,
  TAccountAdminTokenAccount,
  TAccountAdmin,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLSCORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    market: { value: input.market ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    adminTokenAccount: {
      value: input.adminTokenAccount ?? null,
      isWritable: true,
    },
    admin: { value: input.admin ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.adminTokenAccount),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCloseMarketInstructionDataEncoder().encode({}),
  } as CloseMarketInstruction<
    TProgramAddress,
    TAccountMarket,
    TAccountMint,
    TAccountVault,
    TAccountAdminTokenAccount,
    TAccountAdmin,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCloseMarketInstruction<
  TProgram extends string = typeof SOLSCORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    market: TAccountMetas[0];
    mint: TAccountMetas[1];
    vault: TAccountMetas[2];
    adminTokenAccount: TAccountMetas[3];
    admin: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    associatedTokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: CloseMarketInstructionData;
};

export function parseCloseMarketInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseMarketInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      market: getNextAccount(),
      mint: getNextAccount(),
      vault: getNextAccount(),
      adminTokenAccount: getNextAccount(),
      admin: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCloseMarketInstructionDataDecoder().decode(instruction.data),
  };
}
